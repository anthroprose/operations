{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Operations",
  "Parameters": {
    "ArtifactBucket": {
      "Type": "String",
      "Description": "S3 Bucket for Artifacts"
    },
    "MessageTopic": {
      "Type": "String",
      "Description": "Queue Topic ARN for Message Bus"
    },
    "VPCID": {
      "Type": "String",
      "Description": "VPC-ID"
    },
    "AmiId": {
      "Default": "ami-d7e067bc",
      "Type": "String",
      "Description": "AMI ID To use.  Had been using: ami-d7e067bc (us-east-1), ami-60f69f50 (us-west-1 OLD), ami-e6f1cfa3 (us-west-2 OLD)"
    },
    "OpsInstanceSize": {
      "Default": "m4.2xlarge",
      "Type": "String",
      "Description": "Instance Class",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge"
      ],
      "ConstraintDescription": "must select a valid instance type."
    },
    "PublicSubnets": {
      "Default": "",
      "Type": "CommaDelimitedList",
      "Description": "Subnets"
    },
    "PublicAZs": {
      "Default": "",
      "Type": "CommaDelimitedList",
      "Description": "List of Public Subnet AZs"
    },
    "OpsVolumeSize": {
      "Default": "1024",
      "Type": "String",
      "Description": "Volume size in GB"
    },
    "OpsVolumeTag": {
      "Default": "operations",
      "Type": "String",
      "Description": "Ops Volume Tag"
    },
    "ChefClientVersion": {
      "Type": "String",
      "Description": "11.10.4"
    }
  },
  "Mappings": {
    "AWSRegionAvailabilityZones": {
      "us-east-1"   : { "1": "us-east-1a", "2": "us-east-1d", "3": "us-east-1c" },
      "us-west-1"   : { "1": "us-west-1a", "2": "us-west-1b", "3": "us-west-1c" },
      "us-west-2"   : { "1": "us-west-2a", "2": "us-west-2b", "3": "us-west-2c" }
    }
  },
  "Resources": {
    "OpsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPCID" },
        "GroupDescription": "Operations Security Group",
        "SecurityGroupIngress": [ 
          { "IpProtocol": "icmp", "FromPort": "-1", "ToPort": "-1", "CidrIp": "10.0.0.0/8" },
          { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "10.0.0.0/8" },
          { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "10.0.0.0/8" },
          { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "10.0.0.0/8" },
          { "IpProtocol": "tcp", "FromPort": "5544", "ToPort": "5544", "CidrIp": "10.0.0.0/8" },
          { "IpProtocol": "udp", "FromPort": "8125", "ToPort": "8125", "CidrIp": "10.0.0.0/8" },
          { "IpProtocol": "tcp", "FromPort": "9200", "ToPort": "9200", "CidrIp": "10.0.0.0/8" },
          { "IpProtocol": "tcp", "FromPort": "6379", "ToPort": "6379", "CidrIp": "10.0.0.0/8" },
          { "IpProtocol": "udp", "FromPort": "9999", "ToPort": "9999", "CidrIp": "10.0.0.0/8" }
        ]
      }
    },
    "OpsELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPCID"
        },
        "GroupDescription": "Ops ELB Security Group",
        "SecurityGroupIngress": [
          { "IpProtocol": "icmp", "FromPort": "-1", "ToPort": "-1", "CidrIp": "10.0.0.0/8" },
          { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "10.0.0.0/8" },
          { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "10.0.0.0/8" },
          { "IpProtocol": "tcp", "FromPort": "5544", "ToPort": "5544", "CidrIp": "10.0.0.0/8" },
          { "IpProtocol": "udp", "FromPort": "8125", "ToPort": "8125", "CidrIp": "10.0.0.0/8" },
          { "IpProtocol": "tcp", "FromPort": "9200", "ToPort": "9200", "CidrIp": "10.0.0.0/8" },
          { "IpProtocol": "tcp", "FromPort": "6379", "ToPort": "6379", "CidrIp": "10.0.0.0/8" },
          { "IpProtocol": "udp", "FromPort": "9999", "ToPort": "9999", "CidrIp": "10.0.0.0/8" }
        ]
      }
    },
    "OpsELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": {
          "Ref": "PublicSubnets"
        },
        "SecurityGroups": [
          {
            "Ref": "OpsELBSecurityGroup"
          }
        ],
        "Scheme": "internal",
        "Listeners": [
          { "InstancePort": "80", "LoadBalancerPort": "80", "Protocol": "HTTP" },
          { "InstancePort": "443", "LoadBalancerPort": "443", "Protocol": "TCP" },
          { "InstancePort": "5544", "LoadBalancerPort": "5544", "Protocol": "TCP" },
          { "InstancePort": "8125", "LoadBalancerPort": "8125", "Protocol": "TCP" },
          { "InstancePort": "9200", "LoadBalancerPort": "9200", "Protocol": "TCP" },
          { "InstancePort": "6379", "LoadBalancerPort": "6379", "Protocol": "TCP" },
          { "InstancePort": "9999", "LoadBalancerPort": "9999", "Protocol": "TCP" }
        ],
        "HealthCheck": {
          "Target": {
            "Fn::Join": [
              "",
              [
                "HTTP:80/nginx_status"
              ]
            ]
          },
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "8",
          "Interval": "30",
          "Timeout": "10"
        },
        "CrossZone": "true"
      }
    },
    "OpsASGServerGroup": {
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
         "MinInstancesInService": "0",
         "MaxBatchSize": "1"
        }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": { "Ref": "PublicAZs" },
        "VPCZoneIdentifier": { "Ref": "PublicSubnets" },
        "LaunchConfigurationName": { "Ref": "OpsLaunchConfig" },
        "LoadBalancerNames": [ { "Ref":"OpsELB" } ],
        "MinSize": "1",
        "MaxSize": "1",
        "DesiredCapacity": "1",
        "NotificationConfiguration": {
          "TopicARN": { "Ref": "MessageTopic" },
          "NotificationTypes": ["autoscaling:EC2_INSTANCE_LAUNCH", "autoscaling:EC2_INSTANCE_LAUNCH_ERROR", "autoscaling:EC2_INSTANCE_TERMINATE", "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
        },
        "Tags": [ {
          "Key": "Name",
          "Value": "Operations",
          "PropagateAtLaunch": true
        }]
      }
    },
    "OpsAlarmStatusCheckFailed": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Status Check Failed",
        "MetricName": "StatusCheckFailed",
        "Namespace": "AWS/EC2",
        "Statistic": "Maximum",
        "Period": "300",
        "EvaluationPeriods": "1",
        "Threshold": "1",
        "AlarmActions": [ { "Ref": "MessageTopic" } ],
        "Dimensions": [
          {
          "Name": "AutoScalingGroupName",
          "Value": { "Ref": "OpsASGServerGroup" }
          }
        ],
        "ComparisonOperator": "GreaterThanOrEqualToThreshold"
      }
    },
    "OpsPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [{"Ref": "OpsRole"}],
        "PolicyName": "OpsPolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Resource": "*",
              "Action": "cloudformation:DescribeStackResource"
            },
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "cloudwatch:PutMetricData",
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
                "dynamodb:GetItem",
                "dynamodb:ListTables",
                "dynamodb:PutItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:UpdateItem",
                "dynamodb:UpdateTable",
                "ec2:Describe*",
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:CreateVolume",
                "ec2:AttachVolume",
                "ec2:DeleteSnapshot",
                "route53:*",
                "sdb:*",
                "sqs:*"
              ],
              "Resource": "*",
              "Effect": "Allow"
            },
            {
              "Resource": [
                "arn:aws:s3:::jumpshot-asynchronous-jobs",
                "arn:aws:s3:::jumpshot-asynchronous-jobs/*",
                "arn:aws:s3:::jumpshot-production-artifacts",
                "arn:aws:s3:::jumpshot-production-artifacts/*"
              ],
              "Action": [
                "s3:Get*",
                "s3:List*"
              ],
              "Effect": "Allow"
            }
          ]
        }
      }
    },
     "OpsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["ec2.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]},
        "Path": "/"
      }
    },
    
    "OpsProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{ "Ref": "OpsRole" }]}
    },
    
    "OpsLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Authentication":{
          "S3AccessCreds":{
            "type":"S3",
            "roleName":{
              "Ref":"OpsRole"
            }
          }
        },
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/etc/chef/chef-validator.pem": {
                 "source": { "Fn::Join": ["", ["https://s3.amazonaws.com/", { "Ref": "ArtifactBucket" }, "/chef/chef-validator.pem"]]},
                 "mode": "000644",
                 "owner": "root",
                 "group": "root",
                 "authentication": "S3AccessCreds"
              },
              "/etc/chef/client.rb": {
                 "source": { "Fn::Join": ["", ["https://s3.amazonaws.com/", { "Ref": "ArtifactBucket" }, "/chef/client.rb"]]},
                 "mode": "000644",
                 "owner": "root",
                 "group": "root",
                 "authentication": "S3AccessCreds"
              },
              "/etc/chef/.secret": {
                 "source": { "Fn::Join": ["", ["https://s3.amazonaws.com/", { "Ref": "ArtifactBucket" }, "/chef/encrypted_data_bag_secret"]]},
                 "mode": "000600",
                 "owner": "root",
                 "group": "root",
                 "authentication": "S3AccessCreds"
              },
              "/usr/bin/route53-entry": {
                 "source": "https://raw.github.com/Jumpshot/aws-minions/master/route53-entry.py",
                 "mode": "000777",
                 "owner": "root",
                 "group": "root"
              },
              "/usr/bin/snapshot-restore": {
                 "source": "https://raw.github.com/Jumpshot/aws-minions/master/snapshot-restore.py",
                 "mode": "000777",
                 "owner": "root",
                 "group": "root"
              },
              "/usr/bin/snapshot-create": {
                 "source": "https://raw.github.com/Jumpshot/aws-minions/master/snapshot-create.py",
                 "mode": "000777",
                 "owner": "root",
                 "group": "root"
              },
              "/etc/chef/init.json": {
                "mode": "000600",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "{\"run_list\":[\"role[operations]\"],\"jumpshot\":{\"operations\":{\"tag\":\"",
                      { "Ref": "OpsVolumeTag" },
                      "\"}}}"
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "EbsOptimized": true,
        "AssociatePublicIpAddress" : true,
        "IamInstanceProfile": {"Fn::GetAtt": ["OpsProfile", "Arn"] },
        "ImageId": { "Ref": "AmiId" },
        "InstanceMonitoring": "false",
        "InstanceType": { "Ref": "OpsInstanceSize" },
        "KeyName": "infrastructure",
        "SecurityGroups": [ { "Ref": "OpsSecurityGroup" } ],
        "UserData": {
          "Fn::Base64": { "Fn::Join": ["", [
              "#!/bin/bash -x\n",
              "exec > >(tee /var/log/user-data.log)\n",
              "exec 2>&1\n",
              "date\n",
              "yum-config-manager --save --setopt=10gen.skip_if_unavailable=true\n",
              "rm -f /etc/update-motd.d/70-available-updates\n",
              "yum-config-manager --enable epel\n",
              "yum install -y git xfsprogs aws-cfn-bootstrap aws-apitools-common aws-apitools-ec2 python-pip\n",
              "pip install --upgrade boto3\n",
              "yum remove -y aws-cfn-bootstrap ; yum install -y aws-cfn-bootstrap # hack to ensure this is in /opt\n",
              "rm -f /usr/bin/route53-entry /usr/bin/snapshot-restore /usr/bin/snapshot-create \n",
              "/opt/aws/bin/cfn-init -s ", { "Ref": "AWS::StackName" }, " -r OpsLaunchConfig --region ", { "Ref": "AWS::Region" }, "\n",
              "python /usr/bin/snapshot-restore Name ", { "Ref": "OpsVolumeTag" }, " sdh ", { "Ref": "OpsVolumeSize" }, " \"mkfs.xfs -f /dev/sdh\"\n",
              "echo /dev/sdh /opt xfs rw,noatime,nodiratime 0 0 >> /etc/fstab\n",
              "mv /opt /opt-`date +%s`;mkdir /opt;mount /opt\n",
              "yum remove -y aws-cfn-bootstrap ; yum install -y aws-cfn-bootstrap # hack to ensure this is in /opt\n",
              "curl -L https://www.opscode.com/chef/install.sh | bash -s -- -v ", { "Ref": "ChefClientVersion" }, "\n",
              "OPSCODE_USER=`hostname` chef-client -o 'role[operations]' >> /var/log/chef-client.log\n",
              "python /usr/bin/snapshot-create Name ", { "Ref": "OpsVolumeTag" }, " 72 /opt sdh \"/usr/sbin/xfs_freeze -f\" \"/usr/sbin/xfs_freeze -u\"\n",
              "/etc/init.d/nginx stop; sleep 2; /etc/init.d/nginx start\n",
              "/etc/init.d/httpd stop; sleep 2; /etc/init.d/httpd start\n",
              "/etc/init.d/jenkins stop; sleep 2; /etc/init.d/jenkins start\n",
              "/etc/init.d/collector stop; sleep 2; /etc/init.d/collector start\n",
              "date\n"
              ]]
          }
        }
      }
    }
  },
  "Outputs": {
  }
}
